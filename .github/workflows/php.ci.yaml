name: Symfony S6 - PDF Service & WebApp

on:
  push:
    branches: [ "develop","main" ]
  pull_request:
    branches: [ "develop","main" ]

permissions:
  contents: read

jobs:
  symfony-tests:
    runs-on: ubuntu-latest
    env:
      working-directory: ./pdf-webapp
    steps:
      #  To automatically get bug fixes and new Php versions for shivammathur/setup-php,
      # change this to (see https://github.com/shivammathur/setup-php#bookmark-versioning):
      # uses: shivammathur/setup-php@v2
      - uses: shivammathur/setup-php@2cb9b829437ee246e9b3cac53555a39208ca6d28
        with:
          php-version: '8.2'
          working-directory: ${{ env.working-directory }}
      - uses: actions/checkout@v3
        with:
          working-directory: ${{ env.working-directory }}
      - name: Copy .env.test.local
        run: php -r "file_exists('.env.test.local') || copy('.env.test', '.env.test.local');" 
        working-directory: ${{ env.working-directory }}
      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-
          working-directory: ${{ env.working-directory }}
      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
        working-directory: ${{ env.working-directory }}
      - name: Create Database
        run: |
          mkdir -p data
          touch data/database.sqlite
        working-directory: ${{ env.working-directory }}
      - name: Execute tests (Unit and Feature tests) via PHPUnit
        env:
          DATABASE_URL: sqlite:///%kernel.project_dir%/data/database.sqlite
        run: vendor/bin/phpunit
        working-directory: ${{ env.working-directory }}
      # - name: Run PHPUnit
        # run: vendor/bin/phpunit tests/
        working-directory: ${{ env.working-directory }}
      - name: Run PHP_CodeSniffer
        run: vendor/bin/phpcs --standard=PSR2 src/
        working-directory: ${{ env.working-directory }}
      - name: Run PHPStan
        run: vendor/bin/phpstan analyze src/
        working-directory: ${{ env.working-directory }}
      - name: Run PHPMD
        run: vendor/bin/phpmd src/ text cleancode,codesize,controversial,design
        working-directory: ${{ env.working-directory }}
